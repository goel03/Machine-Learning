# Implement Nave Bayes Classifier algorithm for classification problem

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.datasets import load_iris

# Load the Iris dataset
iris = load_iris()

# Split the data into features (X) and target (y)
X = iris.data
y = iris.target

# Initialize the Naive Bayes Classifier model
gnb = GaussianNB()

# Perform cross-validation and get predicted labels for each fold
y_pred = cross_val_predict(gnb, X, y, cv=10)

# Get the confusion matrix
cm = confusion_matrix(y, y_pred)

# Plot the confusion matrix using Seaborn heatmap
sns.heatmap(cm, annot=True, cmap="Blues", xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.xlabel("Predicted")
plt.ylabel("True")
plt.title("Confusion Matrix")

# Calculate accuracy
accuracy = accuracy_score(y, y_pred)

# Print the accuracy score
print("Accuracy:", (accuracy*100),"%")


# Implement K-Means algorithms for clustering problem using sklearn package.

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.datasets import load_iris

# Load the Iris dataset
iris = load_iris()

# Split the data into features (X) and target (y)
X = iris.data
y = iris.target

# Initialize the K-Means clustering model with 3 clusters (corresponding to the 3 classes in the Iris dataset)
kmeans = KMeans(n_clusters=3, random_state=0)

# Perform clustering and get predicted labels
y_pred = kmeans.fit_predict(X)

# Get the confusion matrix
cm = confusion_matrix(y, y_pred)

# Plot the confusion matrix using Seaborn heatmap
sns.heatmap(cm, annot=True, cmap="Blues", xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.xlabel("Predicted")
plt.ylabel("True")
plt.title("Confusion Matrix")

# Calculate clustering accuracy
accuracy = accuracy_score(y, y_pred)

# Print the clustering accuracy
print("Clustering Accuracy:", accuracy)


# Implement SVM classifier for classification problem using sklearn package.


import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.svm import SVC
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.datasets import load_iris

# Load the Iris dataset
iris = load_iris()

# Split the data into features (X) and target (y)
X = iris.data
y = iris.target

# Initialize the SVM classifier model
svm = SVC(kernel='linear')

# Perform cross-validation and get predicted labels for each fold
y_pred = cross_val_predict(svm, X, y, cv=10)

# Get the confusion matrix
cm = confusion_matrix(y, y_pred)

# Plot the confusion matrix using Seaborn heatmap
sns.heatmap(cm, annot=True, cmap="Blues", xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.xlabel("Predicted")
plt.ylabel("True")
plt.title("Confusion Matrix")

# Calculate accuracy
accuracy = accuracy_score(y, y_pred)

# Print the accuracy score
print("Accuracy:", accuracy)


# Implement Decision Tree algorithm for classification problem using sklearn package.

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.datasets import load_iris

# Load the Iris dataset
iris = load_iris()

# Split the data into features (X) and target (y)
X = iris.data
y = iris.target

# Initialize the Decision Tree classifier model
dtc = DecisionTreeClassifier()

# Perform cross-validation and get predicted labels for each fold
y_pred = cross_val_predict(dtc, X, y, cv=10)

# Get the confusion matrix
cm = confusion_matrix(y, y_pred)

# Plot the confusion matrix using Seaborn heatmap
sns.heatmap(cm, annot=True, cmap="Blues", xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.xlabel("Predicted")
plt.ylabel("True")
plt.title("Confusion Matrix")

# Calculate accuracy
accuracy = accuracy_score(y, y_pred)

# Print the accuracy score
print("Accuracy:", accuracy)


# Implement KNN algorithms for classification and regression problem using sklearn package.

# Classfication 

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.datasets import load_iris

# Load the Iris dataset
iris = load_iris()

# Split the data into features (X) and target (y)
X = iris.data
y = iris.target

# Initialize the KNN classifier model
k = 5
knn = KNeighborsClassifier(n_neighbors=k)

# Perform cross-validation and get predicted labels for each fold
y_pred = cross_val_predict(knn, X, y, cv=10)

# Get the confusion matrix
cm = confusion_matrix(y, y_pred)

# Plot the confusion matrix using Seaborn heatmap
sns.heatmap(cm, annot=True, cmap="Blues", xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.xlabel("Predicted")
plt.ylabel("True")
plt.title("Confusion Matrix")

# Calculate accuracy
accuracy = accuracy_score(y, y_pred)

# Print the accuracy score
print("Accuracy:", accuracy)


# Regression 

import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.datasets import load_iris
import matplotlib.pyplot as plt
# Load the Boston Housing dataset
boston = load_iris()

# Split the data into features (X) and target (y)
X = boston.data
y = boston.target

# Initialize the KNN regressor model
k = 5
knn = KNeighborsRegressor(n_neighbors=k)

# Perform cross-validation and get predicted target values for each fold
y_pred = cross_val_predict(knn, X, y, cv=10)

# Calculate mean squared error and R-squared
mse = mean_squared_error(y, y_pred)
r2 = r2_score(y, y_pred)

# Print the mean squared error and R-squared
print("Mean Squared Error:", mse)
print("R-squared:", r2)


# Implement Neural Network algorithm for classification problem using sklearn package.

from sklearn.datasets import load_iris
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn.metrics import confusion_matrix, accuracy_score

# Load the dataset
iris = load_iris()

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.2)

# Initialize the MLPClassifier
mlp = MLPClassifier(hidden_layer_sizes=(5, 2), max_iter=1000)

# Fit the MLPClassifier on the training data
mlp.fit(X_train, y_train)

# Predict the labels of the test data
y_pred = mlp.predict(X_test)

# Evaluate the performance of the model using cross-validation and a confusion matrix
scores = cross_val_score(mlp, iris.data, iris.target, cv=10)
print("Cross-validation scores:", scores)
print("Average cross-validation score:", scores.mean())
print("Confusion matrix:\n", confusion_matrix(y_test, y_pred))
print("Accuracy:", accuracy_score(y_test, y_pred))


